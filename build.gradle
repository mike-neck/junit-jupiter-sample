buildscript {
    ext {
        springBootVersion = '1.4.3.RELEASE'
    }
    repositories {
	    mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
	}
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.io.github.divinespear:jpa-schema-gradle-plugin:0.2.1"
        classpath "$junit5Platform:$junit5PluginArtifact:$junit5PlatformVersion"
    }
}

import java.time.LocalDate
import java.time.ZoneId
import java.time.format.DateTimeFormatter

apply plugin: 'java'
apply plugin: "io.github.divinespear.jpa-schema-generate"
apply plugin: junit5Plugin

repositories {
    mavenCentral()
}

configurations {
    h2database
}

dependencies {
    h2database  "$h2db:h2:$h2Version"

    compile     "$jetbrains:annotations:15.0"
    compileOnly "$lombok:lombok:$lombokVersion"
    compileOnly 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'

    compile     "$di:$di:1"

    testCompileOnly "$lombok:lombok:$lombokVersion"

    testCompile "$guice:guice:$guiceVersion"
    testCompile "$guiceExt:$guicePersist:$guiceVersion"

    testCompile "$slf4j:$slf4jApi:$slf4jVersion"
    testCompile "$logback:$logbackClassic:$logbackVersion"

    testCompile "$hibernate:$hibernateCore:$hibernateVersion"
    testCompile "$hibernate:$hibernateManager:$hibernateVersion"
    testCompile configurations.h2database

    testCompile "$junit5:$junit5Api:$junit5Version"
    testRuntime "$junit5:$junit5Engine:$junit5Version"
}

tasks.withType(JavaCompile) {
    it.targetCompatibility = '1.8'
    it.sourceCompatibility = '1.8'
    it.options.encoding = 'UTF-8'
}

junitPlatform {
    filters {
        includeClassNamePattern '^.*$'
        tags {
            exclude 'two'
        }
    }
}

generateSchema {
    def zone  = ZoneId.of('Asia/Tokyo')
    def today = LocalDate.now(zone)
    def fmt   = DateTimeFormatter.ofPattern('uuuuMMdd')
    def fileName = "V${today.format(fmt)}__create.sql"

    def baseDir = file("${project.buildDir}/ddl")

    vendor = 'hibernate'
    packageToScan = ['com.example.entity']
    scriptAction = 'create'

    format = true

    targets {
        h2 {
            createOutputFileName = fileName
            outputDirectory = file("${project.buildDir}/ddl/h2")
            databaseProductName = 'H2'
            databaseMajorVersion = 1
            databaseMinorVersion = 4
            properties = [
                    'hibernate.dialect': 'org.hibernate.dialect.H2Dialect'
            ]
        }

        mysql {
            createOutputFileName = fileName
            outputDirectory = file("${project.buildDir}/ddl/mysql")
            databaseProductName = 'MySQL'
            databaseMajorVersion = 5
            databaseMinorVersion = 6
            properties = [
                    "hibernate.dialect": 'org.hibernate.dialect.MySQL5InnoDBDialect'
            ]
        }
    }

    ['h2', 'mysql'].each {
        project.tasks.generateSchema.outputs.files file("${baseDir}/$it/$fileName")
    }
}

task('modifyDdl', dependsOn: 'generateSchema') {
    File ddl = file("$buildDir/ddl/h2ddl.sql")
    File h2ddl = tasks.generateSchema.outputs.files.find {
        it.absolutePath.contains('h2')
    }

    outputs.files ddl
    inputs.files h2ddl

    doLast {
        def objects = []
        h2ddl.text.eachLine {
            if (it.contains('create') && (it.contains('table') || it.contains('sequence'))) {
                def obj = it.split()
                objects << "${obj[1]} ${obj[2]}"
            }
        }
        def drop = objects.collect {
            "drop $it if exists;"
        }.join('\n')
        ddl.write("""\
           |$drop
           |
           |${h2ddl.text}
           |""".stripMargin(), 'UTF-8')
    }
}

task('tmpDatabaseReflection', type: JavaExec, dependsOn: 'modifyDdl') {
    def ddl = tasks.modifyDdl.outputs.files
    classpath configurations.h2database.asFileTree
    inputs.files ddl
    main = 'org.h2.tools.RunScript'
    args '-url',
            'jdbc:h2:file:/Users/mike/IdeaProjects/sandbox/sample-projects/junit-jupiter-sample/tmp/data/data;DB_CLOSE_ON_EXIT=FALSE',
            '-script',
            ddl.first(),
            '-user',
            'dev',
            '-password',
            'dev'
}

project(':spring-boot') {
    apply plugin: 'org.springframework.boot'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile  rootProject
        compile     "$jetbrains:annotations:15.0"
        compileOnly "$lombok:lombok:$lombokVersion"
        compile "$slf4j:$slf4jApi:$slf4jVersion"

        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('org.springframework.boot:spring-boot-starter-data-rest')
        runtime "$h2db:h2:$h2Version"

        testCompile('org.springframework.boot:spring-boot-starter-test')
    }
}
